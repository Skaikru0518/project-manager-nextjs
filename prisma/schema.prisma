// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id @default(cuid())
  email          String           @unique
  name           String           @default("User")
  password       String
  role           UserRole         @default(USER)
  level          UserLevel        @default(JUNIOR)
  ownedProjects  Project[]        @relation("ProjectOwner")
  projectMembers ProjectMember[]
  finances       UserFinance[]
  createdAt      DateTime         @default(now())
}

model Project {
  id           String           @id @default(cuid())
  name         String
  description  String?
  tags         Json
  userId       String
  owner        User             @relation("ProjectOwner", fields: [userId], references: [id], onDelete: Cascade)
  members      ProjectMember[]
  tasks        Task[]
  finance      ProjectFinance?
  userFinances UserFinance[]
  startDate    DateTime         @default(now())
  endDate      DateTime?
  completed    Boolean          @default(false)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
}

model ProjectMember {
  id        String   @id @default(cuid())
  projectId String
  userId    String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([projectId, userId])
}

model Task {
  id        String  @id @default(cuid())
  title     String
  dayOfWeek Int // 0 = Monday â€¦ 6 = Sunday
  completed Boolean @default(false)
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProjectFinance {
  id        String   @id @default(cuid())
  projectId String   @unique
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  revenue   Float    @default(0)
  expense   Float    @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserFinance {
  id          String      @id @default(cuid())
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  type        FinanceType
  amount      Float
  month       Int
  year        Int
  category    String?
  projectId   String?
  project     Project?    @relation(fields: [projectId], references: [id], onDelete: SetNull)
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([userId, year, month])
}

enum UserRole {
  ADMIN
  USER
}

enum UserLevel {
  JUNIOR
  MEDIOR
  SENIOR
}

enum FinanceType {
  SALARY
  BONUS
}